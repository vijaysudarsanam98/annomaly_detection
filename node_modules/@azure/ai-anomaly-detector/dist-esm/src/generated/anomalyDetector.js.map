{"version":3,"file":"anomalyDetector.js","sourceRoot":"","sources":["../../../src/generated/anomalyDetector.ts"],"names":[],"mappings":"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","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\nimport \"@azure/core-paging\";\nimport { PagedAsyncIterableIterator } from \"@azure/core-paging\";\nimport * as coreTracing from \"@azure/core-tracing\";\nimport { createSpan } from \"./tracing\";\nimport * as Parameters from \"./models/parameters\";\nimport * as Mappers from \"./models/mappers\";\nimport { AnomalyDetectorContext } from \"./anomalyDetectorContext\";\nimport {\n  AnomalyDetectorOptionalParams,\n  ModelSnapshot,\n  AnomalyDetectorListMultivariateModelNextOptionalParams,\n  AnomalyDetectorListMultivariateModelOptionalParams,\n  DetectRequest,\n  AnomalyDetectorDetectEntireSeriesOptionalParams,\n  AnomalyDetectorDetectEntireSeriesResponse,\n  AnomalyDetectorDetectLastPointOptionalParams,\n  AnomalyDetectorDetectLastPointResponse,\n  DetectChangePointRequest,\n  AnomalyDetectorDetectChangePointOptionalParams,\n  AnomalyDetectorDetectChangePointResponse,\n  ModelInfo,\n  AnomalyDetectorTrainMultivariateModelOptionalParams,\n  AnomalyDetectorTrainMultivariateModelResponse,\n  AnomalyDetectorListMultivariateModelResponse,\n  AnomalyDetectorGetMultivariateModelOptionalParams,\n  AnomalyDetectorGetMultivariateModelResponse,\n  AnomalyDetectorDeleteMultivariateModelOptionalParams,\n  DetectionRequest,\n  AnomalyDetectorDetectAnomalyOptionalParams,\n  AnomalyDetectorDetectAnomalyResponse,\n  AnomalyDetectorGetDetectionResultOptionalParams,\n  AnomalyDetectorGetDetectionResultResponse,\n  AnomalyDetectorExportModelOptionalParams,\n  AnomalyDetectorExportModelResponse,\n  LastDetectionRequest,\n  AnomalyDetectorLastDetectAnomalyOptionalParams,\n  AnomalyDetectorLastDetectAnomalyResponse,\n  AnomalyDetectorListMultivariateModelNextResponse\n} from \"./models\";\n\n/// <reference lib=\"esnext.asynciterable\" />\nexport class AnomalyDetector extends AnomalyDetectorContext {\n  /**\n   * Initializes a new instance of the AnomalyDetector class.\n   * @param endpoint Supported Cognitive Services endpoints (protocol and hostname, for example:\n   *                 https://westus2.api.cognitive.microsoft.com).\n   * @param options The parameter options\n   */\n  constructor(endpoint: string, options?: AnomalyDetectorOptionalParams) {\n    super(endpoint, options);\n  }\n\n  /**\n   * List models of a subscription\n   * @param options The options parameters.\n   */\n  public listMultivariateModel(\n    options?: AnomalyDetectorListMultivariateModelOptionalParams\n  ): PagedAsyncIterableIterator<ModelSnapshot> {\n    const iter = this.listMultivariateModelPagingAll(options);\n    return {\n      next() {\n        return iter.next();\n      },\n      [Symbol.asyncIterator]() {\n        return this;\n      },\n      byPage: () => {\n        return this.listMultivariateModelPagingPage(options);\n      }\n    };\n  }\n\n  private async *listMultivariateModelPagingPage(\n    options?: AnomalyDetectorListMultivariateModelOptionalParams\n  ): AsyncIterableIterator<ModelSnapshot[]> {\n    let result = await this._listMultivariateModel(options);\n    yield result.models || [];\n    let continuationToken = result.nextLink;\n    while (continuationToken) {\n      result = await this._listMultivariateModelNext(\n        continuationToken,\n        options\n      );\n      continuationToken = result.nextLink;\n      yield result.models || [];\n    }\n  }\n\n  private async *listMultivariateModelPagingAll(\n    options?: AnomalyDetectorListMultivariateModelOptionalParams\n  ): AsyncIterableIterator<ModelSnapshot> {\n    for await (const page of this.listMultivariateModelPagingPage(options)) {\n      yield* page;\n    }\n  }\n\n  /**\n   * This operation generates a model with an entire series, each point is detected with the same model.\n   * With this method, points before and after a certain point are used to determine whether it is an\n   * anomaly. The entire detection can give user an overall status of the time series.\n   * @param body Time series points and period if needed. Advanced model parameters can also be set in\n   *             the request.\n   * @param options The options parameters.\n   */\n  async detectEntireSeries(\n    body: DetectRequest,\n    options?: AnomalyDetectorDetectEntireSeriesOptionalParams\n  ): Promise<AnomalyDetectorDetectEntireSeriesResponse> {\n    const { span } = createSpan(\n      \"AnomalyDetector-detectEntireSeries\",\n      options || {}\n    );\n    const operationArguments: coreHttp.OperationArguments = {\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        detectEntireSeriesOperationSpec\n      );\n      return result as AnomalyDetectorDetectEntireSeriesResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * This operation generates a model using points before the latest one. With this method, only\n   * historical points are used to determine whether the target point is an anomaly. The latest point\n   * detecting operation matches the scenario of real-time monitoring of business metrics.\n   * @param body Time series points and period if needed. Advanced model parameters can also be set in\n   *             the request.\n   * @param options The options parameters.\n   */\n  async detectLastPoint(\n    body: DetectRequest,\n    options?: AnomalyDetectorDetectLastPointOptionalParams\n  ): Promise<AnomalyDetectorDetectLastPointResponse> {\n    const { span } = createSpan(\n      \"AnomalyDetector-detectLastPoint\",\n      options || {}\n    );\n    const operationArguments: coreHttp.OperationArguments = {\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        detectLastPointOperationSpec\n      );\n      return result as AnomalyDetectorDetectLastPointResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Evaluate change point score of every series point\n   * @param body Time series points and granularity is needed. Advanced model parameters can also be set\n   *             in the request if needed.\n   * @param options The options parameters.\n   */\n  async detectChangePoint(\n    body: DetectChangePointRequest,\n    options?: AnomalyDetectorDetectChangePointOptionalParams\n  ): Promise<AnomalyDetectorDetectChangePointResponse> {\n    const { span } = createSpan(\n      \"AnomalyDetector-detectChangePoint\",\n      options || {}\n    );\n    const operationArguments: coreHttp.OperationArguments = {\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        detectChangePointOperationSpec\n      );\n      return result as AnomalyDetectorDetectChangePointResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Create and train a multivariate anomaly detection model. The request must include a source parameter\n   * to indicate an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri).\n   * All time-series used in generate the model must be zipped into one single file. Each time-series\n   * will be in a single CSV file in which the first column is timestamp and the second column is value.\n   * @param body Training request\n   * @param options The options parameters.\n   */\n  async trainMultivariateModel(\n    body: ModelInfo,\n    options?: AnomalyDetectorTrainMultivariateModelOptionalParams\n  ): Promise<AnomalyDetectorTrainMultivariateModelResponse> {\n    const { span } = createSpan(\n      \"AnomalyDetector-trainMultivariateModel\",\n      options || {}\n    );\n    const operationArguments: coreHttp.OperationArguments = {\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        trainMultivariateModelOperationSpec\n      );\n      return result as AnomalyDetectorTrainMultivariateModelResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * List models of a subscription\n   * @param options The options parameters.\n   */\n  private async _listMultivariateModel(\n    options?: AnomalyDetectorListMultivariateModelOptionalParams\n  ): Promise<AnomalyDetectorListMultivariateModelResponse> {\n    const { span } = createSpan(\n      \"AnomalyDetector-_listMultivariateModel\",\n      options || {}\n    );\n    const operationArguments: coreHttp.OperationArguments = {\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        listMultivariateModelOperationSpec\n      );\n      return result as AnomalyDetectorListMultivariateModelResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get detailed information of multivariate model, including the training status and variables used in\n   * the model.\n   * @param modelId Model identifier.\n   * @param options The options parameters.\n   */\n  async getMultivariateModel(\n    modelId: string,\n    options?: AnomalyDetectorGetMultivariateModelOptionalParams\n  ): Promise<AnomalyDetectorGetMultivariateModelResponse> {\n    const { span } = createSpan(\n      \"AnomalyDetector-getMultivariateModel\",\n      options || {}\n    );\n    const operationArguments: coreHttp.OperationArguments = {\n      modelId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        getMultivariateModelOperationSpec\n      );\n      return result as AnomalyDetectorGetMultivariateModelResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Delete an existing multivariate model according to the modelId\n   * @param modelId Model identifier.\n   * @param options The options parameters.\n   */\n  async deleteMultivariateModel(\n    modelId: string,\n    options?: AnomalyDetectorDeleteMultivariateModelOptionalParams\n  ): Promise<coreHttp.RestResponse> {\n    const { span } = createSpan(\n      \"AnomalyDetector-deleteMultivariateModel\",\n      options || {}\n    );\n    const operationArguments: coreHttp.OperationArguments = {\n      modelId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        deleteMultivariateModelOperationSpec\n      );\n      return result as coreHttp.RestResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Submit detection multivariate anomaly task with the trained model of modelId, the input schema\n   * should be the same with the training request. Thus request will be complete asynchronously and will\n   * return a resultId for querying the detection result.The request should be a source link to indicate\n   * an externally accessible Azure storage Uri (preferably a Shared Access Signature Uri). All\n   * time-series used in generate the model must be zipped into one single file. Each time-series will be\n   * as follows: the first column is timestamp and the second column is value.\n   * @param modelId Model identifier.\n   * @param body Detect anomaly request\n   * @param options The options parameters.\n   */\n  async detectAnomaly(\n    modelId: string,\n    body: DetectionRequest,\n    options?: AnomalyDetectorDetectAnomalyOptionalParams\n  ): Promise<AnomalyDetectorDetectAnomalyResponse> {\n    const { span } = createSpan(\"AnomalyDetector-detectAnomaly\", options || {});\n    const operationArguments: coreHttp.OperationArguments = {\n      modelId,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        detectAnomalyOperationSpec\n      );\n      return result as AnomalyDetectorDetectAnomalyResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Get multivariate anomaly detection result based on resultId returned by the DetectAnomalyAsync api\n   * @param resultId Result identifier.\n   * @param options The options parameters.\n   */\n  async getDetectionResult(\n    resultId: string,\n    options?: AnomalyDetectorGetDetectionResultOptionalParams\n  ): Promise<AnomalyDetectorGetDetectionResultResponse> {\n    const { span } = createSpan(\n      \"AnomalyDetector-getDetectionResult\",\n      options || {}\n    );\n    const operationArguments: coreHttp.OperationArguments = {\n      resultId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        getDetectionResultOperationSpec\n      );\n      return result as AnomalyDetectorGetDetectionResultResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Export multivariate anomaly detection model based on modelId\n   * @param modelId Model identifier.\n   * @param options The options parameters.\n   */\n  async exportModel(\n    modelId: string,\n    options?: AnomalyDetectorExportModelOptionalParams\n  ): Promise<AnomalyDetectorExportModelResponse> {\n    const { span } = createSpan(\"AnomalyDetector-exportModel\", options || {});\n    const operationArguments: coreHttp.OperationArguments = {\n      modelId,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        exportModelOperationSpec\n      );\n      return result as AnomalyDetectorExportModelResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * Synchronized API for anomaly detection.\n   * @param modelId Model identifier.\n   * @param body Request for last detection.\n   * @param options The options parameters.\n   */\n  async lastDetectAnomaly(\n    modelId: string,\n    body: LastDetectionRequest,\n    options?: AnomalyDetectorLastDetectAnomalyOptionalParams\n  ): Promise<AnomalyDetectorLastDetectAnomalyResponse> {\n    const { span } = createSpan(\n      \"AnomalyDetector-lastDetectAnomaly\",\n      options || {}\n    );\n    const operationArguments: coreHttp.OperationArguments = {\n      modelId,\n      body,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        lastDetectAnomalyOperationSpec\n      );\n      return result as AnomalyDetectorLastDetectAnomalyResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n\n  /**\n   * ListMultivariateModelNext\n   * @param nextLink The nextLink from the previous successful call to the ListMultivariateModel method.\n   * @param options The options parameters.\n   */\n  private async _listMultivariateModelNext(\n    nextLink: string,\n    options?: AnomalyDetectorListMultivariateModelNextOptionalParams\n  ): Promise<AnomalyDetectorListMultivariateModelNextResponse> {\n    const { span } = createSpan(\n      \"AnomalyDetector-_listMultivariateModelNext\",\n      options || {}\n    );\n    const operationArguments: coreHttp.OperationArguments = {\n      nextLink,\n      options: coreHttp.operationOptionsToRequestOptionsBase(options || {})\n    };\n    try {\n      const result = await this.sendOperationRequest(\n        operationArguments,\n        listMultivariateModelNextOperationSpec\n      );\n      return result as AnomalyDetectorListMultivariateModelNextResponse;\n    } catch (error) {\n      span.setStatus({\n        code: coreTracing.SpanStatusCode.UNSET,\n        message: error.message\n      });\n      throw error;\n    } finally {\n      span.end();\n    }\n  }\n}\n// Operation Specifications\nconst serializer = new coreHttp.Serializer(Mappers, /* isXml */ false);\n\nconst detectEntireSeriesOperationSpec: coreHttp.OperationSpec = {\n  path: \"/timeseries/entire/detect\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectEntireResponse\n    },\n    default: {\n      bodyMapper: Mappers.AnomalyDetectorError,\n      headersMapper: Mappers.AnomalyDetectorDetectEntireSeriesExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst detectLastPointOperationSpec: coreHttp.OperationSpec = {\n  path: \"/timeseries/last/detect\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectLastPointResponse\n    },\n    default: {\n      bodyMapper: Mappers.AnomalyDetectorError,\n      headersMapper: Mappers.AnomalyDetectorDetectLastPointExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body,\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst detectChangePointOperationSpec: coreHttp.OperationSpec = {\n  path: \"/timeseries/changepoint/detect\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectChangePointResponse\n    },\n    default: {\n      bodyMapper: Mappers.AnomalyDetectorError,\n      headersMapper: Mappers.AnomalyDetectorDetectChangePointExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body1,\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst trainMultivariateModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/multivariate/models\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AnomalyDetectorTrainMultivariateModelHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper:\n        Mappers.AnomalyDetectorTrainMultivariateModelExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body2,\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst listMultivariateModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/multivariate/models\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ModelList\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper:\n        Mappers.AnomalyDetectorListMultivariateModelExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.skip, Parameters.top],\n  urlParameters: [Parameters.endpoint, Parameters.apiVersion],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst getMultivariateModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/multivariate/models/{modelId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.Model\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.AnomalyDetectorGetMultivariateModelExceptionHeaders\n    }\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.apiVersion,\n    Parameters.modelId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst deleteMultivariateModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/multivariate/models/{modelId}\",\n  httpMethod: \"DELETE\",\n  responses: {\n    204: {},\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper:\n        Mappers.AnomalyDetectorDeleteMultivariateModelExceptionHeaders\n    }\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.apiVersion,\n    Parameters.modelId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst detectAnomalyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/multivariate/models/{modelId}/detect\",\n  httpMethod: \"POST\",\n  responses: {\n    201: {\n      headersMapper: Mappers.AnomalyDetectorDetectAnomalyHeaders\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.AnomalyDetectorDetectAnomalyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body3,\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.apiVersion,\n    Parameters.modelId\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst getDetectionResultOperationSpec: coreHttp.OperationSpec = {\n  path: \"/multivariate/results/{resultId}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.DetectionResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.AnomalyDetectorGetDetectionResultExceptionHeaders\n    }\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.apiVersion,\n    Parameters.resultId\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\nconst exportModelOperationSpec: coreHttp.OperationSpec = {\n  path: \"/multivariate/models/{modelId}/export\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: { type: { name: \"Stream\" }, serializedName: \"parsedResponse\" }\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.AnomalyDetectorExportModelExceptionHeaders\n    }\n  },\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.apiVersion,\n    Parameters.modelId\n  ],\n  headerParameters: [Parameters.accept1],\n  serializer\n};\nconst lastDetectAnomalyOperationSpec: coreHttp.OperationSpec = {\n  path: \"/multivariate/models/{modelId}/last/detect\",\n  httpMethod: \"POST\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.LastDetectionResult\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper: Mappers.AnomalyDetectorLastDetectAnomalyExceptionHeaders\n    }\n  },\n  requestBody: Parameters.body4,\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.apiVersion,\n    Parameters.modelId\n  ],\n  headerParameters: [Parameters.contentType, Parameters.accept],\n  mediaType: \"json\",\n  serializer\n};\nconst listMultivariateModelNextOperationSpec: coreHttp.OperationSpec = {\n  path: \"{nextLink}\",\n  httpMethod: \"GET\",\n  responses: {\n    200: {\n      bodyMapper: Mappers.ModelList\n    },\n    default: {\n      bodyMapper: Mappers.ErrorResponse,\n      headersMapper:\n        Mappers.AnomalyDetectorListMultivariateModelNextExceptionHeaders\n    }\n  },\n  queryParameters: [Parameters.skip, Parameters.top],\n  urlParameters: [\n    Parameters.endpoint,\n    Parameters.apiVersion,\n    Parameters.nextLink\n  ],\n  headerParameters: [Parameters.accept],\n  serializer\n};\n"]}