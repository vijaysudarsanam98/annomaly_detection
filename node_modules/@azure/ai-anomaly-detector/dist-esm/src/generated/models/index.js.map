{"version":3,"file":"index.js","sourceRoot":"","sources":["../../../../src/generated/models/index.ts"],"names":[],"mappings":"AAAA;;;;;;GAMG","sourcesContent":["/*\n * Copyright (c) Microsoft Corporation.\n * Licensed under the MIT License.\n *\n * Code generated by Microsoft (R) AutoRest Code Generator.\n * Changes may cause incorrect behavior and will be lost if the code is regenerated.\n */\n\nimport * as coreHttp from \"@azure/core-http\";\n\n/** The request of entire or last anomaly detection. */\nexport interface DetectRequest {\n  /** Time series data points. Points should be sorted by timestamp in ascending order to match the anomaly detection result. If the data is not sorted correctly or there is duplicated timestamp, the API will not work. In such case, an error message will be returned. */\n  series: TimeSeriesPoint[];\n  /** Optional argument, can be one of yearly, monthly, weekly, daily, hourly, minutely, secondly, microsecond or none. If granularity is not present, it will be none by default. If granularity is none, the timestamp property in time series point can be absent. */\n  granularity?: TimeGranularity;\n  /** Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}. */\n  customInterval?: number;\n  /** Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically. */\n  period?: number;\n  /** Optional argument, advanced model parameter, max anomaly ratio in a time series. */\n  maxAnomalyRatio?: number;\n  /** Optional argument, advanced model parameter, between 0-99, the lower the value is, the larger the margin value will be which means less anomalies will be accepted. */\n  sensitivity?: number;\n  /** Used to specify how to deal with missing values in the input series, it's used when granularity is not \"none\". */\n  imputeMode?: ImputeMode;\n  /** Used to specify the value to fill, it's used when granularity is not \"none\" and imputeMode is \"fixed\". */\n  imputeFixedValue?: number;\n}\n\n/** The definition of input timeseries points. */\nexport interface TimeSeriesPoint {\n  /** Optional argument, timestamp of a data point (ISO8601 format). */\n  timestamp?: Date;\n  /** The measurement of that point, should be float. */\n  value: number;\n}\n\n/** The response of entire anomaly detection. */\nexport interface DetectEntireResponse {\n  /** Frequency extracted from the series, zero means no recurrent pattern has been found. */\n  period: number;\n  /** ExpectedValues contain expected value for each input point. The index of the array is consistent with the input series. */\n  expectedValues: number[];\n  /** UpperMargins contain upper margin of each input point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. Anomalies in response can be filtered by upperBoundary and lowerBoundary. By adjusting marginScale value, less significant anomalies can be filtered in client side. The index of the array is consistent with the input series. */\n  upperMargins: number[];\n  /** LowerMargins contain lower margin of each input point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. Points between the boundary can be marked as normal ones in client side. The index of the array is consistent with the input series. */\n  lowerMargins: number[];\n  /** IsAnomaly contains anomaly properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series. */\n  isAnomaly: boolean[];\n  /** IsNegativeAnomaly contains anomaly status in negative direction for each input point. True means a negative anomaly has been detected. A negative anomaly means the point is detected as an anomaly and its real value is smaller than the expected one. The index of the array is consistent with the input series. */\n  isNegativeAnomaly: boolean[];\n  /** IsPositiveAnomaly contain anomaly status in positive direction for each input point. True means a positive anomaly has been detected. A positive anomaly means the point is detected as an anomaly and its real value is larger than the expected one. The index of the array is consistent with the input series. */\n  isPositiveAnomaly: boolean[];\n  /** The severity score for each input point. The larger the value is, the more sever the anomaly is. For normal points, the \"severity\" is always 0. */\n  severity?: number[];\n}\n\n/** Error information returned by the API. */\nexport interface AnomalyDetectorError {\n  /** The error code. */\n  code?: AnomalyDetectorErrorCodes;\n  /** A message explaining the error reported by the service. */\n  message?: string;\n}\n\n/** The response of last anomaly detection. */\nexport interface DetectLastPointResponse {\n  /** Frequency extracted from the series, zero means no recurrent pattern has been found. */\n  period: number;\n  /** Suggested input series points needed for detecting the latest point. */\n  suggestedWindow: number;\n  /** Expected value of the latest point. */\n  expectedValue: number;\n  /** Upper margin of the latest point. UpperMargin is used to calculate upperBoundary, which equals to expectedValue + (100 - marginScale)*upperMargin. If the value of latest point is between upperBoundary and lowerBoundary, it should be treated as normal value. By adjusting marginScale value, anomaly status of latest point can be changed. */\n  upperMargin: number;\n  /** Lower margin of the latest point. LowerMargin is used to calculate lowerBoundary, which equals to expectedValue - (100 - marginScale)*lowerMargin. */\n  lowerMargin: number;\n  /** Anomaly status of the latest point, true means the latest point is an anomaly either in negative direction or positive direction. */\n  isAnomaly: boolean;\n  /** Anomaly status in negative direction of the latest point. True means the latest point is an anomaly and its real value is smaller than the expected one. */\n  isNegativeAnomaly: boolean;\n  /** Anomaly status in positive direction of the latest point. True means the latest point is an anomaly and its real value is larger than the expected one. */\n  isPositiveAnomaly: boolean;\n  /** The severity score for the last input point. The larger the value is, the more sever the anomaly is. For normal points, the \"severity\" is always 0. */\n  severity?: number;\n}\n\n/** The request of change point detection. */\nexport interface DetectChangePointRequest {\n  /** Time series data points. Points should be sorted by timestamp in ascending order to match the change point detection result. */\n  series: TimeSeriesPoint[];\n  /** Can only be one of yearly, monthly, weekly, daily, hourly, minutely or secondly. Granularity is used for verify whether input series is valid. */\n  granularity: TimeGranularity;\n  /** Custom Interval is used to set non-standard time interval, for example, if the series is 5 minutes, request can be set as {\"granularity\":\"minutely\", \"customInterval\":5}. */\n  customInterval?: number;\n  /** Optional argument, periodic value of a time series. If the value is null or does not present, the API will determine the period automatically. */\n  period?: number;\n  /** Optional argument, advanced model parameter, a default stableTrendWindow will be used in detection. */\n  stableTrendWindow?: number;\n  /** Optional argument, advanced model parameter, between 0.0-1.0, the lower the value is, the larger the trend error will be which means less change point will be accepted. */\n  threshold?: number;\n}\n\n/** The response of change point detection. */\nexport interface DetectChangePointResponse {\n  /**\n   * Frequency extracted from the series, zero means no recurrent pattern has been found.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly period?: number;\n  /** isChangePoint contains change point properties for each input point. True means an anomaly either negative or positive has been detected. The index of the array is consistent with the input series. */\n  isChangePoint?: boolean[];\n  /** the change point confidence of each point */\n  confidenceScores?: number[];\n}\n\n/** Train result of a model including status, errors and diagnose info for model and variables. */\nexport interface ModelInfo {\n  /** An optional field, indicating how many previous points will be used to compute the anomaly score of the subsequent point. */\n  slidingWindow?: number;\n  alignPolicy?: AlignPolicy;\n  /** Source link to the input variables. Each variable should be a csv file with two columns, `timestamp` and `value`. By default, the file name of the variable will be used as its variable name. */\n  source: string;\n  /** A required field, indicating the start time of training data. Should be date-time. */\n  startTime: Date;\n  /** A required field, indicating the end time of training data. Should be date-time. */\n  endTime: Date;\n  /** An optional field. The name of the model whose maximum length is 24. */\n  displayName?: string;\n  /**\n   * Model training status.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly status?: ModelStatus;\n  /**\n   * Error messages when failed to create a model.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly errors?: ErrorResponse[];\n  /** NOTE: This property will not be serialized. It can only be populated by the server. */\n  readonly diagnosticsInfo?: DiagnosticsInfo;\n}\n\nexport interface AlignPolicy {\n  /** An optional field, indicating how we align different variables to the same time-range. Either Inner or Outer. */\n  alignMode?: AlignMode;\n  /** An optional field, indicating how missing values will be filled. One of Previous, Subsequent, Linear, Zero, Fixed, and NotFill. Cannot be set to NotFill, when the alignMode is Outer. */\n  fillNAMethod?: FillNAMethod;\n  /** An optional field. Required when fillNAMethod is Fixed. */\n  paddingValue?: number;\n}\n\nexport interface ErrorResponse {\n  /** The error code. */\n  code: string;\n  /** The message explaining the error reported by the service. */\n  message: string;\n}\n\nexport interface DiagnosticsInfo {\n  modelState?: ModelState;\n  variableStates?: VariableState[];\n}\n\nexport interface ModelState {\n  /** Epoch id */\n  epochIds?: number[];\n  trainLosses?: number[];\n  validationLosses?: number[];\n  latenciesInSeconds?: number[];\n}\n\nexport interface VariableState {\n  /** Variable name. */\n  variable?: string;\n  /** Proportion of NaN values filled of the variable. */\n  filledNARatio?: number;\n  /** Number of effective points counted. */\n  effectiveCount?: number;\n  /** Start time of the variable. */\n  startTime?: Date;\n  /** End time of the variable. */\n  endTime?: Date;\n}\n\n/** Response of getting a model. */\nexport interface Model {\n  /** Model identifier. */\n  modelId: string;\n  /** Date and time (UTC) when the model was created. */\n  createdTime: Date;\n  /** Date and time (UTC) when the model was last updated. */\n  lastUpdatedTime: Date;\n  /** Train result of a model including status, errors and diagnose info for model and variables. */\n  modelInfo?: ModelInfo;\n}\n\n/** Detection request. */\nexport interface DetectionRequest {\n  /** Source link to the input variables. Each variable should be a csv with two columns, `timestamp` and `value`. The file name of the variable will be used as its name. The variables used in detection should be exactly the same with those used in the training phase. */\n  source: string;\n  /** A required field, indicating the start time of data for detection. Should be date-time. */\n  startTime: Date;\n  /** A required field, indicating the end time of data for detection. Should be date-time. */\n  endTime: Date;\n}\n\n/** Response of the given resultId. */\nexport interface DetectionResult {\n  resultId: string;\n  summary: DetectionResultSummary;\n  /** Detection result for each timestamp. */\n  results: AnomalyState[];\n}\n\nexport interface DetectionResultSummary {\n  /** Status of detection results. One of CREATED, RUNNING, READY, and FAILED. */\n  status: DetectionStatus;\n  /** Error message when detection is failed. */\n  errors?: ErrorResponse[];\n  variableStates?: VariableState[];\n  /** Detection request. */\n  setupInfo: DetectionRequest;\n}\n\nexport interface AnomalyState {\n  /** timestamp */\n  timestamp: Date;\n  value?: AnomalyValue;\n  /** Error message for the current timestamp */\n  errors?: ErrorResponse[];\n}\n\nexport interface AnomalyValue {\n  /** True if an anomaly is detected at the current timestamp. */\n  isAnomaly: boolean;\n  /** Indicates the significance of the anomaly. The higher the severity, the more significant the anomaly. */\n  severity: number;\n  /** Raw score from the model. */\n  score: number;\n  interpretation?: AnomalyInterpretation[];\n}\n\nexport interface AnomalyInterpretation {\n  variable?: string;\n  contributionScore?: number;\n  correlationChanges?: CorrelationChanges;\n}\n\nexport interface CorrelationChanges {\n  /** correlated variables */\n  changedVariables?: string[];\n  /** changes in correlation */\n  changedValues?: number[];\n}\n\nexport interface LastDetectionRequest {\n  /** variables */\n  variables: VariableValues[];\n  /** number of timestamps on which the model detects */\n  detectingPoints: number;\n}\n\nexport interface VariableValues {\n  /** variable name */\n  name: string;\n  /** timestamps */\n  timestamps: string[];\n  /** values */\n  values: number[];\n}\n\nexport interface LastDetectionResult {\n  variableStates?: VariableState[];\n  results?: AnomalyState[];\n}\n\n/** Defines headers for AnomalyDetector_detectEntireSeries operation. */\nexport interface AnomalyDetectorDetectEntireSeriesExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Response of listing models. */\nexport interface ModelList {\n  /** List of models */\n  models: ModelSnapshot[];\n  /** Current count of trained multivariate models. */\n  currentCount: number;\n  /** Max number of models that can be trained for this subscription. */\n  maxCount: number;\n  /** The link to fetch more models. */\n  nextLink?: string;\n}\n\nexport interface ModelSnapshot {\n  /** Model identifier. */\n  modelId: string;\n  /** Date and time (UTC) when the model was created. */\n  createdTime: Date;\n  /** Date and time (UTC) when the model was last updated. */\n  lastUpdatedTime: Date;\n  /**\n   * Model training status.\n   * NOTE: This property will not be serialized. It can only be populated by the server.\n   */\n  readonly status: ModelStatus;\n  displayName?: string;\n  /** Total number of variables. */\n  variablesCount: number;\n}\n\n/** Defines headers for AnomalyDetector_trainMultivariateModel operation. */\nexport interface AnomalyDetectorTrainMultivariateModelHeaders {\n  /** Location and ID of the model. */\n  location?: string;\n}\n\n/** Defines headers for AnomalyDetector_detectAnomaly operation. */\nexport interface AnomalyDetectorDetectAnomalyHeaders {\n  /** Location and ID of the detection result. */\n  location?: string;\n}\n\n/** Known values of {@link AnomalyDetectorErrorCodes} that the service accepts. */\nexport const enum KnownAnomalyDetectorErrorCodes {\n  InvalidCustomInterval = \"InvalidCustomInterval\",\n  BadArgument = \"BadArgument\",\n  InvalidGranularity = \"InvalidGranularity\",\n  InvalidPeriod = \"InvalidPeriod\",\n  InvalidModelArgument = \"InvalidModelArgument\",\n  InvalidSeries = \"InvalidSeries\",\n  InvalidJsonFormat = \"InvalidJsonFormat\",\n  RequiredGranularity = \"RequiredGranularity\",\n  RequiredSeries = \"RequiredSeries\",\n  InvalidImputeMode = \"InvalidImputeMode\",\n  InvalidImputeFixedValue = \"InvalidImputeFixedValue\"\n}\n\n/**\n * Defines values for AnomalyDetectorErrorCodes. \\\n * {@link KnownAnomalyDetectorErrorCodes} can be used interchangeably with AnomalyDetectorErrorCodes,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **InvalidCustomInterval** \\\n * **BadArgument** \\\n * **InvalidGranularity** \\\n * **InvalidPeriod** \\\n * **InvalidModelArgument** \\\n * **InvalidSeries** \\\n * **InvalidJsonFormat** \\\n * **RequiredGranularity** \\\n * **RequiredSeries** \\\n * **InvalidImputeMode** \\\n * **InvalidImputeFixedValue**\n */\nexport type AnomalyDetectorErrorCodes = string;\n/** Defines values for TimeGranularity. */\nexport type TimeGranularity =\n  | \"yearly\"\n  | \"monthly\"\n  | \"weekly\"\n  | \"daily\"\n  | \"hourly\"\n  | \"minutely\"\n  | \"secondly\"\n  | \"microsecond\"\n  | \"none\";\n/** Defines values for AlignMode. */\nexport type AlignMode = \"Inner\" | \"Outer\";\n/** Known values of {@link FillNAMethod} that the service accepts. */\nexport const enum KnownFillNAMethod {\n  Previous = \"Previous\",\n  Subsequent = \"Subsequent\",\n  Linear = \"Linear\",\n  Zero = \"Zero\",\n  Fixed = \"Fixed\",\n  NotFill = \"NotFill\"\n}\n\n/**\n * Defines values for FillNAMethod. \\\n * {@link KnownFillNAMethod} can be used interchangeably with FillNAMethod,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **Previous** \\\n * **Subsequent** \\\n * **Linear** \\\n * **Zero** \\\n * **Fixed** \\\n * **NotFill**\n */\nexport type FillNAMethod = string;\n/** Defines values for ModelStatus. */\nexport type ModelStatus = \"CREATED\" | \"RUNNING\" | \"READY\" | \"FAILED\";\n/** Defines values for DetectionStatus. */\nexport type DetectionStatus = \"CREATED\" | \"RUNNING\" | \"READY\" | \"FAILED\";\n\n/** Contains response data for the detectEntireSeries operation. */\nexport type AnomalyDetectorDetectEntireSeriesResponse = DetectEntireResponse & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: DetectEntireResponse;\n  };\n};\n\n/** Contains response data for the detectLastPoint operation. */\nexport type AnomalyDetectorDetectLastPointResponse = DetectLastPointResponse & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: DetectLastPointResponse;\n  };\n};\n\n/** Contains response data for the detectChangePoint operation. */\nexport type AnomalyDetectorDetectChangePointResponse = DetectChangePointResponse & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: DetectChangePointResponse;\n  };\n};\n\n/** Contains response data for the trainMultivariateModel operation. */\nexport type AnomalyDetectorTrainMultivariateModelResponse = AnomalyDetectorTrainMultivariateModelHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: AnomalyDetectorTrainMultivariateModelHeaders;\n  };\n};\n\n/** Contains response data for the getMultivariateModel operation. */\nexport type AnomalyDetectorGetMultivariateModelResponse = Model & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: Model;\n  };\n};\n\n/** Contains response data for the detectAnomaly operation. */\nexport type AnomalyDetectorDetectAnomalyResponse = AnomalyDetectorDetectAnomalyHeaders & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The parsed HTTP response headers. */\n    parsedHeaders: AnomalyDetectorDetectAnomalyHeaders;\n  };\n};\n\n/** Contains response data for the getDetectionResult operation. */\nexport type AnomalyDetectorGetDetectionResultResponse = DetectionResult & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: DetectionResult;\n  };\n};\n\n/** Contains response data for the exportModel operation. */\nexport type AnomalyDetectorExportModelResponse = {\n  /**\n   * BROWSER ONLY\n   *\n   * The response body as a browser Blob.\n   * Always `undefined` in node.js.\n   */\n  blobBody?: Promise<Blob>;\n  /**\n   * NODEJS ONLY\n   *\n   * The response body as a node.js Readable stream.\n   * Always `undefined` in the browser.\n   */\n  readableStreamBody?: NodeJS.ReadableStream;\n\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse;\n};\n\n/** Optional parameters. */\nexport interface AnomalyDetectorListMultivariateModelOptionalParams\n  extends coreHttp.OperationOptions {\n  /** $skip indicates how many models will be skipped. */\n  skip?: number;\n  /** $top indicates how many models will be fetched. */\n  top?: number;\n}\n\n/** Contains response data for the listMultivariateModel operation. */\nexport type AnomalyDetectorListMultivariateModelResponse = ModelList & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: ModelList;\n  };\n};\n\n/** Contains response data for the lastDetectAnomaly operation. */\nexport type AnomalyDetectorLastDetectAnomalyResponse = LastDetectionResult & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: LastDetectionResult;\n  };\n};\n\n/** Optional parameters. */\nexport interface AnomalyDetectorListMultivariateModelNextOptionalParams\n  extends coreHttp.OperationOptions {\n  /** $skip indicates how many models will be skipped. */\n  skip?: number;\n  /** $top indicates how many models will be fetched. */\n  top?: number;\n}\n\n/** Contains response data for the listMultivariateModelNext operation. */\nexport type AnomalyDetectorListMultivariateModelNextResponse = ModelList & {\n  /** The underlying HTTP response. */\n  _response: coreHttp.HttpResponse & {\n    /** The response body as text (string format) */\n    bodyAsText: string;\n\n    /** The response body as parsed JSON or XML */\n    parsedBody: ModelList;\n  };\n};\n\n/** Optional parameters. */\nexport interface AnomalyDetectorOptionalParams\n  extends coreHttp.ServiceClientOptions {\n  /** Anomaly Detector API version (for example, v1.0). */\n  apiVersion?: string;\n  /** Overrides client endpoint. */\n  endpoint?: string;\n}\n\n/** Known values of {@link ImputeMode} that the service accepts. */\nexport const enum KnownImputeMode {\n  Auto = \"auto\",\n  Previous = \"previous\",\n  Linear = \"linear\",\n  Fixed = \"fixed\",\n  Zero = \"zero\",\n  NotFill = \"notFill\"\n}\n\n/**\n * Defines values for ImputeMode. \\\n * {@link KnownImputeMode} can be used interchangeably with ImputeMode,\n *  this enum contains the known values that the service supports.\n * ### Known values supported by the service\n * **auto** \\\n * **previous** \\\n * **linear** \\\n * **fixed** \\\n * **zero** \\\n * **notFill**\n */\nexport type ImputeMode = string;\n\n/** Defines headers for AnomalyDetector_detectLastPoint operation. */\nexport interface AnomalyDetectorDetectLastPointExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Defines headers for AnomalyDetector_detectChangePoint operation. */\nexport interface AnomalyDetectorDetectChangePointExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Defines headers for AnomalyDetector_trainMultivariateModel operation. */\nexport interface AnomalyDetectorTrainMultivariateModelExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Defines headers for AnomalyDetector_listMultivariateModel operation. */\nexport interface AnomalyDetectorListMultivariateModelExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Defines headers for AnomalyDetector_getMultivariateModel operation. */\nexport interface AnomalyDetectorGetMultivariateModelExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Defines headers for AnomalyDetector_deleteMultivariateModel operation. */\nexport interface AnomalyDetectorDeleteMultivariateModelExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Defines headers for AnomalyDetector_detectAnomaly operation. */\nexport interface AnomalyDetectorDetectAnomalyExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Defines headers for AnomalyDetector_getDetectionResult operation. */\nexport interface AnomalyDetectorGetDetectionResultExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n/** Defines headers for AnomalyDetector_exportModel operation. */\nexport interface AnomalyDetectorExportModelExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Defines headers for AnomalyDetector_lastDetectAnomaly operation. */\nexport interface AnomalyDetectorLastDetectAnomalyExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Defines headers for AnomalyDetector_listMultivariateModelNext operation. */\nexport interface AnomalyDetectorListMultivariateModelNextExceptionHeaders {\n  /** error code */\n  xMsErrorCode?: string;\n}\n\n/** Optional parameters. */\nexport interface AnomalyDetectorDetectEntireSeriesOptionalParams\n  extends coreHttp.OperationOptions {}\n  \n/** Optional parameters. */\nexport interface AnomalyDetectorDetectLastPointOptionalParams\n  extends coreHttp.OperationOptions {}\n\n/** Optional parameters. */\nexport interface AnomalyDetectorDetectChangePointOptionalParams\n  extends coreHttp.OperationOptions {}\n\n/** Optional parameters. */\nexport interface AnomalyDetectorTrainMultivariateModelOptionalParams\n  extends coreHttp.OperationOptions {}\n\n/** Optional parameters. */\nexport interface AnomalyDetectorGetMultivariateModelOptionalParams\n  extends coreHttp.OperationOptions {}\n\n/** Optional parameters. */\nexport interface AnomalyDetectorDeleteMultivariateModelOptionalParams\n  extends coreHttp.OperationOptions {}\n\n/** Optional parameters. */\nexport interface AnomalyDetectorDetectAnomalyOptionalParams\n  extends coreHttp.OperationOptions {}\n  \n/** Optional parameters. */\nexport interface AnomalyDetectorGetDetectionResultOptionalParams\n  extends coreHttp.OperationOptions {}\n\n/** Optional parameters. */\nexport interface AnomalyDetectorExportModelOptionalParams\n  extends coreHttp.OperationOptions {}\n\n/** Optional parameters. */\nexport interface AnomalyDetectorLastDetectAnomalyOptionalParams\n  extends coreHttp.OperationOptions {}\n"]}